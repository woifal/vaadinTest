"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var testing_1 = require('@angular/core/testing');
var polymer_element_1 = require('./polymer-element');
var core_1 = require('@angular/core');
var forms_1 = require('@angular/forms');
var platform_browser_1 = require('@angular/platform-browser');
var Polymer = window.Polymer;
describe('PolymerElement', function () {
    beforeEach(testing_1.async(function () {
        testing_1.TestBed.configureTestingModule({
            imports: [
                forms_1.ReactiveFormsModule
            ],
            declarations: [
                TestComponent,
                TestComponentForm,
                TestComponentCheckboxForm,
                TestComponentLightDom,
                TestComponentDomApi,
                polymer_element_1.PolymerElement('test-element'),
                polymer_element_1.PolymerElement('paper-checkbox')
            ],
            schemas: [core_1.CUSTOM_ELEMENTS_SCHEMA]
        });
        testing_1.TestBed.compileComponents();
    }));
    var testElement;
    var testComponent;
    var fixture;
    function createTestComponent(type) {
        fixture = testing_1.TestBed.createComponent(type);
        testElement = fixture.debugElement.query(function (el) { return el.name == 'test-element'; }).nativeElement;
        testComponent = fixture.componentInstance;
    }
    it('is defined', function () {
        expect(polymer_element_1.PolymerElement).toBeDefined();
    });
    it('is function', function () {
        expect(typeof polymer_element_1.PolymerElement).toBe('function');
    });
    describe('Developer experience', function () {
        it('should throw an error for non-registered elements', function () {
            try {
                polymer_element_1.PolymerElement('non-registered');
            }
            catch (error) {
                expect(error.message).toContain('element "non-registered" has not been registered');
            }
        });
    });
    describe('Two-way data binding', function () {
        beforeEach(function () { createTestComponent(TestComponent); });
        it('should have initial bound value', function () {
            fixture.detectChanges();
            expect(testElement.value).toEqual('foo');
        });
        it('should change value on bound value change', function () {
            testComponent.value = 'bar';
            fixture.detectChanges();
            expect(testElement.value).toEqual('bar');
        });
        it('should change bound value on value change', function () {
            testElement.value = 'bar';
            expect(testComponent.value).toEqual('bar');
        });
        it('should reflect change to a nested value (object)', function () {
            testComponent.nestedObject.value = 'foo';
            fixture.detectChanges();
            var nested = Polymer.dom(testElement.root).querySelector('#nested');
            expect(nested.getAttribute('nested-object-value')).toEqual('foo');
        });
        it('should reflect change to a nested value (array)', function () {
            testComponent.arrayObject.push('foo');
            fixture.detectChanges();
            var nested = Polymer.dom(testElement.root).querySelector('#nested');
            expect(nested.getAttribute('array-object-value')).toEqual('foo');
        });
    });
    describe('Form field', function () {
        var form;
        function formTests() {
            describe('Initial state', function () {
                it('should be initially pristine', function () {
                    expect(testElement.classList.contains('ng-pristine')).toEqual(true);
                });
                it('should be initially untouched', function () {
                    expect(testElement.classList.contains('ng-untouched')).toEqual(true);
                });
                it('should be invalid', function () {
                    expect(testElement.classList.contains('ng-invalid')).toEqual(true);
                });
                it('should be an invalid form', function () {
                    expect(form.valid).toEqual(false);
                });
                it('should not reflect invalid state to element initially', function () {
                    expect(testElement.invalid).toBeFalsy();
                });
            });
            describe('after value has changed', function () {
                beforeEach(function () {
                    testElement.value = 'qux';
                    fixture.detectChanges();
                });
                it('should be dirty on value change', function () {
                    expect(testElement.classList.contains('ng-dirty')).toEqual(true);
                });
                it('should be a valid form', function () {
                    expect(form.valid).toEqual(true);
                });
                it('should have correct value', function () {
                    expect(form.value.value).toEqual('qux');
                });
                it('should be valid', function () {
                    expect(testElement.classList.contains('ng-valid')).toEqual(true);
                });
                it('should reflect invalid state to testElement when value changed', function () {
                    testElement.value = '';
                    fixture.detectChanges();
                    expect(testElement.invalid).toEqual(true);
                });
            });
        }
        describe('Forms API', function () {
            beforeEach(function () {
                createTestComponent(TestComponentForm);
                form = new forms_1.FormGroup({ value: new forms_1.FormControl() });
                fixture.debugElement.componentInstance.form = form;
                fixture.detectChanges();
            });
            formTests();
        });
    });
    describe('Checked Element inside Form', function () {
        var form;
        var checkedElement;
        describe('initially false', function () {
            beforeEach(function () {
                createTestComponent(TestComponentCheckboxForm);
                form = new forms_1.FormGroup({ value: new forms_1.FormControl(false) });
                fixture.debugElement.componentInstance.form = form;
                fixture.detectChanges();
                checkedElement = fixture.debugElement.query(function (el) { return el.name == 'paper-checkbox'; }).nativeElement;
            });
            it('should set default value', function () {
                expect(checkedElement.checked).toEqual(false);
            });
            it('should set form value', function () {
                checkedElement.checked = true;
                expect(form.value.value).toEqual(true);
            });
        });
        describe('initially true', function () {
            beforeEach(function () {
                createTestComponent(TestComponentCheckboxForm);
                form = new forms_1.FormGroup({ value: new forms_1.FormControl(true) });
                fixture.debugElement.componentInstance.form = form;
                fixture.detectChanges();
                checkedElement = fixture.debugElement.query(function (el) { return el.name == 'paper-checkbox'; }).nativeElement;
            });
            it('should set default value', function () {
                expect(checkedElement.checked).toEqual(true);
            });
            it('should set form value', function () {
                checkedElement.checked = false;
                expect(form.value.value).toEqual(false);
            });
        });
    });
    describe('Light dom content', function () {
        beforeEach(function (done) {
            createTestComponent(TestComponentLightDom);
            setTimeout(done, 0);
        });
        function contentParentChildren(contentParentId) {
            var selected = testElement.$[contentParentId];
            return Polymer.dom(selected).getDistributedNodes();
        }
        function containsChild(contentParentId, childClassName) {
            var children = contentParentChildren(contentParentId);
            return Array.prototype.filter.call(children, function (node) {
                return node.classList && node.classList.contains(childClassName);
            }).length > 0;
        }
        it('should distribute correctly', function () {
            // Local dom
            expect(containsChild('selected', 'foo')).toEqual(false);
            expect(containsChild('all', 'foo')).toEqual(true);
            expect(containsChild('selected', 'bar')).toEqual(false);
            expect(containsChild('all', 'bar')).toEqual(false);
            expect(containsChild('selected', 'baz')).toEqual(true);
            var hasQux = Array.prototype.filter.call(contentParentChildren('all'), function (node) {
                return node.textContent.indexOf('Qux') !== -1;
            });
            expect(hasQux.length).toEqual(1);
            // Light dom
            expect(Polymer.dom(testElement).querySelector('.foo')).not.toEqual(null);
        });
        it('should support ngif', function (done) {
            testComponent.barVisible = true;
            fixture.detectChanges();
            // Distribution with polyfills is done with MutationObservers, so it is asynchronous
            setTimeout(function () {
                expect(containsChild('selected', 'bar')).toEqual(true);
                expect(containsChild('all', 'bar2')).toEqual(true);
                done();
            }, 0);
        });
    });
    describe('DOM API', function () {
        beforeEach(function () { createTestComponent(TestComponentDomApi); });
        it('should trigger one mutation after multiple operations', function (done) {
            var observerSpy = jasmine.createSpy('observerSpy');
            var domApi = Polymer.dom(testElement).observeNodes(observerSpy);
            testComponent.arrayObject = [1, 2, 3];
            fixture.detectChanges();
            testComponent.arrayObject.push(4);
            fixture.detectChanges();
            testComponent.arrayObject.pop();
            fixture.detectChanges();
            testComponent.arrayObject = [0, 1, 2];
            fixture.detectChanges();
            testComponent.barVisible = true;
            fixture.detectChanges();
            testComponent.barVisible = false;
            fixture.detectChanges();
            setTimeout(function () {
                expect(observerSpy).toHaveBeenCalledTimes(1);
                done();
            }, 0);
        });
        it('should have the correct adapter', function () {
            var functionName = function (fun) {
                var ret = fun.toString();
                ret = ret.substr('function '.length);
                ret = ret.substr(0, ret.indexOf('('));
                return ret;
            };
            var dom = platform_browser_1.__platform_browser_private__.getDOM();
            var adapterName = functionName(dom.constructor);
            if (Polymer.Settings.useShadow) {
                expect(adapterName).toEqual("PolymerDomAdapter");
            }
            else {
                expect(adapterName).toEqual("PolymerShadyDomAdapter");
            }
        });
    });
});
var TestComponent = (function () {
    function TestComponent() {
        this.value = 'foo';
        this.nestedObject = { value: undefined };
        this.arrayObject = [];
        this.barVisible = false;
    }
    TestComponent = __decorate([
        core_1.Component({
            template: "<test-element [(value)]=\"value\" [(nestedObject)]=\"nestedObject\" [(arrayObject)]=\"arrayObject\"></test-element>"
        }), 
        __metadata('design:paramtypes', [])
    ], TestComponent);
    return TestComponent;
}());
var TestComponentForm = (function () {
    function TestComponentForm() {
        this.value = 'foo';
    }
    TestComponentForm = __decorate([
        core_1.Component({
            template: "\n    <form [formGroup]=\"form\">\n      <test-element formControlName=\"value\" required></test-element>\n    </form>"
        }), 
        __metadata('design:paramtypes', [])
    ], TestComponentForm);
    return TestComponentForm;
}());
var TestComponentCheckboxForm = (function () {
    function TestComponentCheckboxForm() {
    }
    TestComponentCheckboxForm = __decorate([
        core_1.Component({
            // test-element added to make the global test setup not crash.
            template: "\n    <form [formGroup]=\"form\">\n      <paper-checkbox formControlName=\"value\"></paper-checkbox>\n    </form>\n    <test-element></test-element>"
        }), 
        __metadata('design:paramtypes', [])
    ], TestComponentCheckboxForm);
    return TestComponentCheckboxForm;
}());
var TestComponentLightDom = (function () {
    function TestComponentLightDom() {
    }
    TestComponentLightDom = __decorate([
        core_1.Component({
            template: "\n    <test-element [(value)]=\"value\" class=\"hascontent\">\n      <div class=\"foo\">Foo</div>\n      <div class=\"bar selected\" *ngIf=\"barVisible\">Bar</div>\n      <div class=\"bar2\" *ngIf=\"barVisible\">Bar2</div>\n      <div class=\"baz selected\">Baz</div>\n      Qux\n    </test-element>"
        }), 
        __metadata('design:paramtypes', [])
    ], TestComponentLightDom);
    return TestComponentLightDom;
}());
var TestComponentDomApi = (function () {
    function TestComponentDomApi() {
    }
    TestComponentDomApi = __decorate([
        core_1.Component({
            template: "\n    <test-element [(value)]=\"value\" class=\"hascontent\">\n      <div class=\"foo\" *ngFor=\"let item of arrayObject\">Foo {{item}}</div>\n      <div class=\"bar selected\" *ngIf=\"barVisible\">Bar</div>\n      <div class=\"bar2\" *ngIf=\"barVisible\">Bar2</div>\n      <div class=\"baz selected\">Baz</div>\n    </test-element>"
        }), 
        __metadata('design:paramtypes', [])
    ], TestComponentDomApi);
    return TestComponentDomApi;
}());
//# sourceMappingURL=data:application/json;base64,